allprojects {
    plugins.apply("java-library")
    plugins.apply("java")

    repositories {
        mavenCentral()
    }

    java {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
}

subprojects {

    group = 'org.chun'
    version = '0.0.1'

    ext {
        springBootVersion = '3.2.0'
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    dependencies {
        compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.24'
        annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.24'
    }

    tasks.register('prepareKotlinBuildScriptModel') {

    }
}

tasks.register('refreshGit') {

    File rootFile = file('.gitignore')
    if (rootFile.exists()) {
        println '[ Overwrite GitIgnore File From Nuance ]'
        subprojects.forEach { sub ->
            print sub.name + '...'
            exec {
                commandLine 'cp', rootFile.path, sub.projectDir.path + '/.gitignore'
            }
            println 'done'
        }
    }
}

tasks.register('importall', Copy) {

    dependsOn subprojects.jar
    from subprojects.collect { project -> project.file('build/classes') }
    into 'build/classes'

    // 重複時略過
    eachFile { fileDetails ->
        def targetFile = new File("build/classes-all/${fileDetails.relativePath}")
        if (targetFile.exists()) {
            println "Skipping: ${fileDetails.relativePath} (file already exists)"
            fileDetails.exclude()
        }
    }
}

tasks.register('export', Copy) {
    dependsOn jar

    from 'build/libs/nuance.jar'
    into project.rootDir
}

assemble.dependsOn(export)

jar {
    dependsOn clean, importall

    from 'build/classes'
    archiveBaseName = 'nuance'
}

clean {
    dependsOn subprojects.clean
}